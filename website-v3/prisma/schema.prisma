// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model People {
    id        Int      @id @default(autoincrement())
    firstName String
    lastName  String
    Class     Class[]
    signIns   SignIn[]
}

model Class {
    id     Int      @id @default(autoincrement())
    name   String
    people People[]
    User   User     @relation(fields: [userId], references: [id])
    userId String
}

model SignIn {
    id        Int      @id @default(autoincrement())
    people    People   @relation(fields: [peopleId], references: [id])
    timestamp DateTime @default(now())
    Scanner   Scanner  @relation(fields: [scannerId], references: [id])
    scannerId Int
    peopleId  Int
}

model Scanner {
    id             Int      @id @default(autoincrement())
    name           String   @unique
    signIns        SignIn[]
    purgeEveryDays Int      @default(14)
    scannerSecret  String
    createdBy      User     @relation(fields: [userId], references: [id])
    userId         String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    classes       Class[]
    Scanner       Scanner[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
